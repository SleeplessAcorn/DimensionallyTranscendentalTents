import javax.imageio.ImageIO
import java.awt.image.BufferedImage

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle.forge' version '2.0.2'
    id 'com.matthewprenger.cursegradle' version '1.0.9'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8

def buildVersion = System.getenv('BUILD_NUMBER') ?: 'CUSTOM'
def userName = project.findProperty('devUsername') ?: modName

archivesBaseName = modName
group = modGroup
version = "${mcVersion}-${modVersion}-${buildVersion}"

tasks.build.dependsOn sourceJar

minecraft {
    version = "${mcVersion}-${mcfVersion}"
    runDir = 'run'
    replaceIn 'Nomagi.java'
    replace '@VERSION@', project.version
//    clientRunArgs += "--username=${userName}"
    mappings = project.mcpMappings
}

repositories {
    maven { url 'http://tehnut.info/maven' }
    maven { url 'http://maven.tterrag.com' }
    maven { url 'http://dvs1.progwml6.com/files/maven' }
}

dependencies {
    deobfCompile "info.amerifrance.guideapi:Guide-API:${gapiVersion}"
    deobfCompile "mcp.mobius.waila:Hwyla:${hwylaVersion}"
    deobfCompile "mezz.jei:jei_${jeiVersion}"
//    deobfCompile "team.chisel.ctm:CTM:${ctmVersion}"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info', '**/*.properties', 'pack.mcmeta'
        expand 'mod_version': modVersion,
                'mc_version': mcVersion
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info', '**/*.properties', 'pack.mcmeta'
    }
    doLast {
        println ':stripPngMetadata'
        fileTree(dir: sourceSets.main.output.resourcesDir,
                 include: '**/*.png').getFiles().forEach {
            rewritePng(it)
        }
    }
}

jar {
    manifest.mainAttributes(
            'Built-By': System.getProperty('user.name'),
            'Created-By': "${System.getProperty('java.vm.version')}"
                    + "(${System.getProperty('java.vm.vendor')})",
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Built-On': minecraft.version
    )
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
        }
    }
    repositories {
        if (project.hasProperty('mavenRepo')) {
            maven { url project.mavenRepo }
        } else mavenLocal()
    }
}

curseforge {
    apiKey = project.findProperty('curseKeyTehNut') ?: ''
    project {
        id = project.curseId
        changelog = getChangelogText()
        releaseType = 'beta'
        addArtifact sourceJar
    }
}

def rewritePng(File file) {
    BufferedImage image = null
    try {
        image = ImageIO.read(file)
    } catch(IOException ignored) {
        println "    Failed to parse ${file.getName()}, skipping..."
    }
    if(image != null) {
        int oldSize = file.length()
        ImageIO.write(image, 'png', file)
        println "    Rewrote ${file.getName()}, reduced size by ${(oldSize - file.length())} bytes"
    }
}

static String getChangelogText() {
    File changelog = new File('changelog.txt')
    String entry = '', separator = '---'
    if (changelog.exists()) {
        int lineCount = 0
        boolean done = false
        changelog.eachLine {
            if (done || it == null) {
                return
            }
            if (lineCount < 3) {
                lineCount++
                if (it.startsWith(separator)) {
                    return
                }
            }
            if (!it.startsWith(separator)) {
                entry += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
                return
            }
            done = true
        }
    }
    return entry
}

